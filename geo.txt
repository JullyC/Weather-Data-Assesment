  path = input("Please provide path for the TIFF files")
  if len(glob.glob(path+"*.tif")) == 0:
    print("No files to process. Exiting application..")
    sys.exit()
    
  # Reading tiff files
  for img_file in glob.glob(path+"*.tif"):
    # Read raster
    with rasterio.open(img_file) as r:
        T0 = r.affine  # upper-left pixel corner affine transform
        p1 = Proj(r.crs)
        A = r.read_band(1)  # pixel values

    # All rows and columns
    cols, rows = np.meshgrid(np.arange(A.shape[1]), np.arange(A.shape[0]))

    # Get affine transform for pixel centres
    T1 = T0 * Affine.translation(0.5, 0.5)
    # Function to convert pixel row/column index (from 0) to easting/northing at centre
    rc2en = lambda r, c: (c, r) * T1

    # Based on the size of the data this will take some time TODO: Need to parallelize the process
    eastings, northings = np.vectorize(rc2en, otypes=[np.float, np.float])(rows, cols)

    # Project all longitudes, latitudes
    p2 = Proj(proj='latlong', datum='WGS84')
    longs, lats = transform(p1, p2, eastings, northings)

    weather_data = open(img_file+"_weather_data.dat", "w") 

    # Sample data is generate in a sequential process. TODO: Need to parallelize the process
    for r in range(0, len(longs)):
        s_long = longs[r]
        s_lats = lats[r]

        for i in range(0, len(s_long)):
            
                #r = requests.get('http://iatageo.com/getCode/' + str(s_lats[i]) + '/' + str(s_long[i]))
                #geocity = r.json()['IATA']
                geocity = "MEL"
                elevation = 39
                Local_Time = strTimeProp( datetime.datetime.strptime(dmin,dfrmt.rstrip("\r\n")).strftime("%Y-%m-%d %H:%M:%S"),
                                      datetime.datetime.strptime(dmax,dfrmt.rstrip("\r\n")).strftime("%Y-%m-%d %H:%M:%S")
                                      ,'%Y-%m-%d %H:%M:%S', random.random())
                
                lcl_mnth = Local_Time.split('-')[1]
                for season_dtl,season_dtl_info in season_conditions.items():
                  if lcl_mnth in season_dtl_info["month"]:
                    (tmin,tmax) = season_dtl_info["temp"]
                    
                pressure,humidity = round(random.uniform(pmin,pmax),1),random.randrange(hmax,hmin,-1)
                
                Temperature = round(random.uniform(tmin,tmax),1) 
                
                ## Logic for Weather condition
                if Temperature < 0:
                    condition = "Snow"
                elif Temperature > 0.0 and pressure >= 700 and pressure <= 1000 and humidity >= 70:
                    condition = "Rain"
                    Temperature = '+'+str(Temperature)
                else:
                    condition = "Sunny"
                    Temperature = '+'+str(Temperature)
                    
                geo = str(geocity) + "|" + str(Lat) + "," + str(Lon) + "," + str(elevation)+ "|" 
                weather_dtl = str(Temperature) + "|" + condition + "|" + Local_Time + "|" + str(pressure) + "|" + str(humidity)
                #print(City,str(Lat),str(Lon),elevation,,Temperature,condition,Local_Time,ph)  
                weather_data.write(geo+weather_dtl+"\n")
    weather_data.close()
